{% extends "::base.html.twig" %}

{% block title %}PHP-FIG — {{titles.psr2}}（Coding Style Guide）{% endblock %}

{% block body %}
{% include("VoyPhpFigBundle:Psr:header.html.twig") %}
        <div id="content-wrapper">
            <div class="inner clearfix">
                <section id="main-content">




<h1>编码风格指南</h1>

<p>This guide extends and expands on <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a>, the basic coding standard.</p>
<p class="zh">本指南扩展自 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a>, 这是基本编码标准。</p>
<p>The intent of this guide is to reduce cognitive friction when scanning code
from different authors. It does so by enumerating a shared set of rules and
expectations about how to format PHP code.</p>
<p class="zh">本指南的目的是当查看不同作者的代码是减少认识上的不同。列举一系列关于如果格式化PHP代码的规则和期望。</p>
<p>The style rules herein are derived from commonalities among the various member
projects. When various authors collaborate across multiple projects, it helps
to have one set of guidelines to be used among all those projects. Thus, the
benefit of this guide is not in the rules themselves, but in the sharing of
those rules.</p>
<p class="zh">本文中的风格规则是从多个成员项目之间的共性得出的。
    当不同的作者在在多个项目中进行合作，就有了一系列在所有项目之间都使用的准则，这样对所有项目都是有益的。
    所以，本文指南的好处不在于规则本身，而是分享这些规则，让更多的人使用。</p>

<p class="en">The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
interpreted as described in <a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>.</p>
<p class="zh">本文中的这些关键字 &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot;  在这篇文档中有定义和描述 <a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>.</p>
<h2>1. Overview</h2>

<ul>
<li class="en"><p>Code MUST follow <a href="{{ path('voy_php_fig_psr_psr1') }}">PSR-1</a>.</p></li>
<li class="zh"><p>代码必须遵循 <a href="{{ path('voy_php_fig_psr_psr1') }}">PSR-1</a>。</p></li>
<li class="en"><p>Code MUST use 4 spaces for indenting, not tabs.</p></li>
<li class="zh"><p>代码缩进必须使用4个空格，而不是TAB。</p></li>
<li class="en"><p>There MUST NOT be a hard limit on line length; the soft limit MUST be 120
characters; lines SHOULD be 80 characters or less.</p></li>
<li class="zh"><p>对于每行字符数没有硬性限制，软性限制是120字符。建议每行应该少于80个字符。</p></li>
<li class="en"><p>There MUST be one blank line after the <code>namespace</code> declaration, and there
MUST be one blank line after the block of <code>use</code> declarations.</p></li>
<li class="zh"><p><code>namespace</code> 声明的后面必须有一空行, 并且<code>use</code> 之后也必须有一空行。</p></li>
<li class="en"><p>Opening braces for classes MUST go on the next line, and closing braces MUST
go on the next line after the body.</p></li>
<li class="zh"><p>定义类的左括号必须新起一行，右括号也必须另起一行。</p></li>
<li class="en"><p>Opening braces for methods MUST go on the next line, and closing braces MUST
go on the next line after the body.</p></li>
<li class="zh"><p>类方法定义的左括号必须另起一行, 右括号也要另起一行。</p></li>
<li class="en"><p>Visibility MUST be declared on all properties and methods; <code>abstract</code> and
<code>final</code> MUST be declared before the visibility; <code>static</code> MUST be declared
after the visibility.</p></li>
<li class="zh"><p>属性和方法必须声明可见性（<code> </code>，<code>private</code>，<code>protected</code>）； <code>abstract</code> and
<code>final</code>必须在可见性前面声明。 <code>static</code> 必须在可见性后面声明。</p></li>
<li class="en"><p>Control structure keywords MUST have one space after them; method and
function calls MUST NOT.</p></li>
<li class="zh"><p>控制结构的关键字后面必须有空格；方法和函数调用的后面一定不能有空格。</p></li>
<li class="en"><p>Opening braces for control structures MUST go on the same line, and closing
braces MUST go on the next line after the body.</p></li>
<li class="zh"><p>控制结构关键字的左括号必须在同一行，右括号必须另起一行。</p></li>
<li class="en"><p>Opening parentheses for control structures MUST NOT have a space after them,
and closing parentheses for control structures MUST NOT have a space before.</p></li>
<li class="zh"><p>控制结构的小括号后面和前面一定不能有空格，</p></li>
</ul>

<h3>1.1. Example</h3>

<p class="zh">This example encompasses some of the rules below as a quick overview:</p>
<p class="en">下面是这些规则的快速概览：</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">FooInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">BarClass</span> <span class="k">as</span> <span class="nx">Bar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="k">extends</span> <span class="nx">Bar</span> <span class="k">implements</span> <span class="nx">FooInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">sampleFunction</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">bar</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">&gt;</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">BazClass</span><span class="o">::</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">final</span> <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>2. General</h2>

<h3 class="en">2.1 Basic Coding Standard</h3>
<h3 class="zh">2.1 基本编码标准</h3>

<p class="en">Code MUST follow all rules outlined in <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a>.</p>
<p class="zh">代码必须遵循 <a href="{{ path('voy_php_fig_psr_psr1') }}">PSR-1</a>.</p>

<h3 class="en">2.2 Files</h3>
<h3 class="zh">2.2 文件</h3>

<p class="en">All PHP files MUST use the Unix LF (linefeed) line ending.</p>
<p class="zh">所有PHP文件行尾必须使用Unix LF (换行)。</p>

<p class="en">All PHP files MUST end with a single blank line.</p>
<p class="zh">所有PHP文件必须以一个空行结束。</p>

<p class="en">The closing <code>?&gt;</code> tag MUST be omitted from files containing only PHP.</p>
<p class="zh">只包含PHP代码的文件结尾处必须省略闭合标签<code>?&gt;</code>。</p>

<h3 class="en">2.3. Lines</h3>
<h3 class="zh">2.3. 行</h3>

<p class="en">There MUST NOT be a hard limit on line length.</p>
<p class="zh">每行的长度没有硬性限制。</p>

<p class="en">The soft limit on line length MUST be 120 characters; automated style checkers
MUST warn but MUST NOT error at the soft limit.</p>
<p class="zh">每行长度的软限制必须是120个字符；自动化风格检查程序检查软限制必须有提醒，但是不要报错</p>

<p class="en">Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD
be split into multiple subsequent lines of no more than 80 characters each.</p>
<p class="zh">每行不应该超过80个字符；如果超过，应该分割成多个不超过80个字符的行。</p>

<p class="en">There MUST NOT be trailing whitespace at the end of non-blank lines.</p>
<p class="zh">非空行结尾不能有空格。</p>

<p class="en">Blank lines MAY be added to improve readability and to indicate related
blocks of code.</p>
<p class="zh">可以添加空行以增加可读性，并指明相关代码块。</p>

<p class="en">There MUST NOT be more than one statement per line.</p>
<p class="zh">每行不能有多个语句。</p>

<h3 class="en">2.4. Indenting</h3>
<h3 class="zh">2.4. 缩进</h3>

<p class="en">Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting.</p>
<p class="zh">代码必须使用4个空格的缩进，不能使用tabs缩进。</p>

<blockquote>
<p class="en">N.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid
problems with diffs, patches, history, and annotations. The use of spaces
also makes it easy to insert fine-grained sub-indentation for inter-line 
alignment.</p>
</blockquote>
<blockquote>
<p class="zh">仅使用空格，而不是混合空格与制表符，
    有助于避免因为diff文件，补丁，历史和注释产生的问题。
    使用空格也可以很容易地插入细粒度的子缩进跨线对齐。</p>
</blockquote>

<h3 class="en">2.5. Keywords and True/False/Null</h3>
<h3 class="zh">2.5. PHP关键字，以及True/False/Null</h3>

<p class="en">PHP <a href="http://php.net/manual/en/reserved.keywords.php">keywords</a> MUST be in lower case.</p>
<p class="zh">PHP的关键字 <a href="http://php.net/manual/en/reserved.keywords.php">keywords</a> 必须用小写。</p>

<p class="en">The PHP constants <code>true</code>, <code>false</code>, and <code>null</code> MUST be in lower case.</p>
<p class="zh">PHP的常量<code>true</code>, <code>false</code>, and <code>null</code> 必须用小写。</p>

<h2 class="en">3. Namespace and Use Declarations</h2>
<h2 class="zh">3. 命名空间和Use声明</h2>

<p class="en">When present, there MUST be one blank line after the <code>namespace</code> declaration.</p>
<p class="zh"><code>namespace</code> 声明之后必须有一空行。</p>

<p class="en">When present, all <code>use</code> declarations MUST go after the <code>namespace</code>
declaration.</p>
<p class="zh"> <code>use</code> 声明必须在 <code>namespace</code>声明之后。</p>

<p class="en">There MUST be one <code>use</code> keyword per declaration.</p>
<p class="zh">每个声明用一个<code>use</code> 关键字。</p>

<p class="en">There MUST be one blank line after the <code>use</code> block.</p>
<p class="zh"><code>use</code> 代码块之后必须有一空行。</p>

<p>For example:</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">FooClass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">BarClass</span> <span class="k">as</span> <span class="nx">Bar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

<span class="c1">// ... additional PHP code ...</span>
</code></pre>
</div>
<h2 class="en">4. Classes, Properties, and Methods</h2>
<h2 class="zh">4. 类，属性和方法</h2>

<p class="en">The term &quot;class&quot; refers to all classes, interfaces, and traits.</p>
<p class="zh">术语 &quot;class&quot; 只全部的类，接口，和特性。</p>

<h3>4.1. Extends and Implements</h3>
<h3>4.1. Extends 和 Implements</h3>

<p>The <code>extends</code> and <code>implements</code> keywords MUST be declared on the same line as
the class name.</p>
<p>必须在类名字的同一行声明关键字 <code>extends</code> and <code>implements</code> 。</p>

<p>The opening brace for the class MUST go on its own line; the closing brace
for the class MUST go on the next line after the body.</p>
<p>类的左括号必须在类名同一行，而类定义结束的右括号必须另起一行。</p>

<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">FooClass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">BarClass</span> <span class="k">as</span> <span class="nx">Bar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span> <span class="k">extends</span> <span class="nx">ParentClass</span> <span class="k">implements</span> <span class="nx">\ArrayAccess</span><span class="p">,</span> <span class="nx">\Countable</span>
<span class="p">{</span>
    <span class="c1">// constants, properties, methods</span>
<span class="p">}</span>
</code></pre></div>
<p>Lists of <code>implements</code> MAY be split across multiple lines, where each
subsequent line is indented once. When doing so, the first item in the list
MUST be on the next line, and there MUST be only one interface per line.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">FooClass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">BarClass</span> <span class="k">as</span> <span class="nx">Bar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span> <span class="k">extends</span> <span class="nx">ParentClass</span> <span class="k">implements</span>
    <span class="nx">\ArrayAccess</span><span class="p">,</span>
    <span class="nx">\Countable</span><span class="p">,</span>
    <span class="nx">\Serializable</span>
<span class="p">{</span>
    <span class="c1">// constants, properties, methods</span>
<span class="p">}</span>
</code></pre></div>
<h3>4.2. Properties</h3>
<h3>4.2. 属性</h3>

<p>Visibility MUST be declared on all properties.</p>
<p>所有属性必须声明可访问性。</p>

<p>The <code>var</code> keyword MUST NOT be used to declare a property.</p>
<p>不能使用关键字<code>var</code>声明属性。 </p>

<p>There MUST NOT be more than one property declared per statement.</p>
<p>每个语句只能声明一个属性。</p>

<p>Property names SHOULD NOT be prefixed with a single underscore to indicate
protected or private visibility.</p>
<p>不应该使用下划线前缀表示属性是protected或private。</p>

<p>A property declaration looks like the following.</p>
<p>应该像下面这样声明属性。</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h3>4.3. Methods</h3>
<h3>4.3. 方法</h3>

<p>Visibility MUST be declared on all methods.</p>
<p>所有方法必须声明访问性。</p>

<p>Method names SHOULD NOT be prefixed with a single underscore to indicate
protected or private visibility.</p>
<p>不应该使用下划线前缀表示方法是protected或private。</p>

<p>Method names MUST NOT be declared with a space after the method name. The
opening brace MUST go on its own line, and the closing brace MUST go on the
next line following the body. There MUST NOT be a space after the opening
parenthesis, and there MUST NOT be a space before the closing parenthesis.</p>
<p>方法名后面不能跟空格。左大括号必须继续在同一行，右大括号必须在下一行。左括号后不能有空格，右括号前不能是空格。</p>

<p>A method declaration looks like the following. Note the placement of
parentheses, commas, spaces, and braces:</p>
<p>方法声明如下. 注意小括号，逗号，空格和大括号的位置:</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">fooBarBaz</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[])</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>4.4. Method Arguments</h3>
<h3>4.4. 方法参数</h3>

<p>In the argument list, there MUST NOT be a space before each comma, and there
MUST be one space after each comma.</p>
<p>参数列表中，逗号前面不能有空格，且逗号后面有一个空格。</p>

<p>Method arguments with default values MUST go at the end of the argument
list.</p>
<p>有默认值得参数必须在参数列表的后面。</p>

<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[])</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Argument lists MAY be split across multiple lines, where each subsequent line
is indented once. When doing so, the first item in the list MUST be on the
next line, and there MUST be only one argument per line.</p>
<p>参数列表可以被分割为多行，其中每个后续行缩进一次。当这样做时，列表中的第一个项目必须在下一行，而且必须是每行只有一个参数。</p>

<p>When the argument list is split across multiple lines, the closing parenthesis
and opening brace MUST be placed together on their own line with one space
between them.</p>
<p>参数列表分割成多行时，左括号和右括号必须单独一行，</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">aVeryLongMethodName</span><span class="p">(</span>
        <span class="nx">ClassTypeHint</span> <span class="nv">$arg1</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span>
        <span class="k">array</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>4.5. <code>abstract</code>, <code>final</code>, and <code>static</code></h3>
<h3>4.5. <code>abstract</code>, <code>final</code>, and <code>static</code></h3>

<p>When present, the <code>abstract</code> and <code>final</code> declarations MUST precede the
visibility declaration.</p>
<p> <code>abstract</code> and <code>final</code> 必须在可访问性声明之前。</p>

<p>When present, the <code>static</code> declaration MUST come after the visibility
declaration.</p>
<p>When present, the <code>static</code> 声明必须在可访问性之后。</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>

<span class="k">abstract</span> <span class="k">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="nv">$foo</span><span class="p">;</span>

    <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">zim</span><span class="p">();</span>

    <span class="k">final</span> <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>4.6. Method and Function Calls</h3>
<h3>4.6. 方法和函数调用</h3>

<p>When making a method or function call, there MUST NOT be a space between the
method or function name and the opening parenthesis, there MUST NOT be a space
after the opening parenthesis, and there MUST NOT be a space before the
closing parenthesis. In the argument list, there MUST NOT be a space before
each comma, and there MUST be one space after each comma.</p>
<p>调用函数和方法是，函数名和左括号之间不能有空格；左括号之后也不能有空格；右括号之前不能有空格。参数列表中，逗号之前不能有空格，逗号之后空一格。</p>

<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nx">bar</span><span class="p">();</span>
<span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">);</span>
<span class="nx">Foo</span><span class="o">::</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span><span class="p">);</span>
</code></pre></div>
<p>Argument lists MAY be split across multiple lines, where each subsequent line
is indented once. When doing so, the first item in the list MUST be on the
next line, and there MUST be only one argument per line.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span>
    <span class="nv">$longArgument</span><span class="p">,</span>
    <span class="nv">$longerArgument</span><span class="p">,</span>
    <span class="nv">$muchLongerArgument</span>
<span class="p">);</span>
</code></pre></div>
<h2>5. Control Structures</h2>
<h2>5. 控制结构</h2>

<p>The general style rules for control structures are as follows:</p>
<p>控制结构的通用风格规则如下：</p>

<ul>
<li>There MUST be one space after the control structure keyword</li>
<li>控制结构关键字后面要有一空格</li>
<li>There MUST NOT be a space after the opening parenthesis</li>
<li>左小括号后面不能有空格</li>
<li>There MUST NOT be a space before the closing parenthesis</li>
<li>右小括号前面不能有空格</li>
<li>There MUST be one space between the closing parenthesis and the opening
brace</li>
<li>右小括号和左大括号之间必须有一空格</li>
<li>The structure body MUST be indented once</li>
<li>结构体必须缩进一次</li>
<li>The closing brace MUST be on the next line after the body</li>
<li>右大括号必须在结构体的下一行</li>
</ul>

<p>The body of each structure MUST be enclosed by braces. This standardizes how
the structures look, and reduces the likelihood of introducing errors as new
lines get added to the body.</p>
<p>结构体必须用括号括起来。结构看来来是标准化的，并且能够减少引入错误的机会。</p>

<h3>5.1. <code>if</code>, <code>elseif</code>, <code>else</code></h3>

<p>An <code>if</code> structure looks like the following. Note the placement of parentheses,
spaces, and braces; and that <code>else</code> and <code>elseif</code> are on the same line as the
closing brace from the earlier body.</p>
<p> <code>if</code> 结构像下面这样。 注意小括号，空格和大括号； <code>else</code> 和 <code>elseif</code> 在前一个结构体的右大括号的同一行。</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$expr1</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// if body</span>
<span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$expr2</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// elseif body</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// else body;</span>
<span class="p">}</span>
</code></pre></div>
<p>The keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control
keywords look like single words.</p>
<p> <code>elseif</code> 应该用 <code>else if</code> 替代， 以便所有的控制结构看来都是一个单词。</p>

<h3>5.2. <code>switch</code>, <code>case</code></h3>

<p>A <code>switch</code> structure looks like the following. Note the placement of
parentheses, spaces, and braces. The <code>case</code> statement MUST be indented once
from <code>switch</code>, and the <code>break</code> keyword (or other terminating keyword) MUST be
indented at the same level as the <code>case</code> body. There MUST be a comment such as
<code>// no break</code> when fall-through is intentional in a non-empty <code>case</code> body.</p>
<p><code>switch</code> 结构是这样的。注意小括号，空格，大括号的位置。 <code>case</code> 必须缩进一次参照 <code>switch</code>,
    并且<code>break</code> 关键字 (or other terminating keyword) 作为<code>case</code>的体必须在同一等级上缩进。 
 当非空的<code>case</code> 体没有中断语句是必须有这样的说明<code>// no break</code>.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">switch</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">&#39;First case, with a break&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">&#39;Second case, which falls through&#39;</span><span class="p">;</span>
        <span class="c1">// no break</span>
    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">&#39;Third case, return instead of break&#39;</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">&#39;Default case&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h3>5.3. <code>while</code>, <code>do while</code></h3>

<p>A <code>while</code> statement looks like the following. Note the placement of
parentheses, spaces, and braces.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// structure body</span>
<span class="p">}</span>
</code></pre></div>
<p>Similarly, a <code>do while</code> statement looks like the following. Note the placement
of parentheses, spaces, and braces.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="c1">// structure body;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</code></pre></div>
<h3>5.4. <code>for</code></h3>

<p>A <code>for</code> statement looks like the following. Note the placement of parentheses,
spaces, and braces.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// for body</span>
<span class="p">}</span>
</code></pre></div>
<h3>5.5. <code>foreach</code></h3>

<p>A <code>foreach</code> statement looks like the following. Note the placement of
parentheses, spaces, and braces.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$iterable</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// foreach body</span>
<span class="p">}</span>
</code></pre></div>
<h3>5.6. <code>try</code>, <code>catch</code></h3>

<p>A <code>try catch</code> block looks like the following. Note the placement of
parentheses, spaces, and braces.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// try body</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">FirstExceptionType</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// catch body</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">OtherExceptionType</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// catch body</span>
<span class="p">}</span>
</code></pre></div>
<h2>6. Closures</h2>

<p>Closures MUST be declared with a space after the <code>function</code> keyword, and a
space before and after the <code>use</code> keyword.</p>

<p>The opening brace MUST go on the same line, and the closing brace MUST go on
the next line following the body.</p>

<p>There MUST NOT be a space after the opening parenthesis of the argument list
or variable list, and there MUST NOT be a space before the closing parenthesis
of the argument list or variable list.</p>

<p>In the argument list and variable list, there MUST NOT be a space before each
comma, and there MUST be one space after each comma.</p>

<p>Closure arguments with default values MUST go at the end of the argument
list.</p>

<p>A closure declaration looks like the following. Note the placement of
parentheses, commas, spaces, and braces:</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$closureWithArgs</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="nv">$arg2</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// body</span>
<span class="p">};</span>

<span class="nv">$closureWithArgsAndVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="nv">$arg2</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$var1</span><span class="p">,</span> <span class="nv">$var2</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// body</span>
<span class="p">};</span>
</code></pre></div>
<p>Argument lists and variable lists MAY be split across multiple lines, where
each subsequent line is indented once. When doing so, the first item in the
list MUST be on the next line, and there MUST be only one argument or variable
per line.</p>

<p>When the ending list (whether or arguments or variables) is split across
multiple lines, the closing parenthesis and opening brace MUST be placed
together on their own line with one space between them.</p>

<p>The following are examples of closures with and without argument lists and
variable lists split across multiple lines.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$longArgs_noVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>
    <span class="nv">$longArgument</span><span class="p">,</span>
    <span class="nv">$longerArgument</span><span class="p">,</span>
    <span class="nv">$muchLongerArgument</span>
<span class="p">)</span> <span class="p">{</span>
   <span class="c1">// body</span>
<span class="p">};</span>

<span class="nv">$noArgs_longVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span>
    <span class="nv">$longVar1</span><span class="p">,</span>
    <span class="nv">$longerVar2</span><span class="p">,</span>
    <span class="nv">$muchLongerVar3</span>
<span class="p">)</span> <span class="p">{</span>
   <span class="c1">// body</span>
<span class="p">};</span>

<span class="nv">$longArgs_longVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>
    <span class="nv">$longArgument</span><span class="p">,</span>
    <span class="nv">$longerArgument</span><span class="p">,</span>
    <span class="nv">$muchLongerArgument</span>
<span class="p">)</span> <span class="k">use</span> <span class="p">(</span>
    <span class="nv">$longVar1</span><span class="p">,</span>
    <span class="nv">$longerVar2</span><span class="p">,</span>
    <span class="nv">$muchLongerVar3</span>
<span class="p">)</span> <span class="p">{</span>
   <span class="c1">// body</span>
<span class="p">};</span>

<span class="nv">$longArgs_shortVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>
    <span class="nv">$longArgument</span><span class="p">,</span>
    <span class="nv">$longerArgument</span><span class="p">,</span>
    <span class="nv">$muchLongerArgument</span>
<span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$var1</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// body</span>
<span class="p">};</span>

<span class="nv">$shortArgs_longVars</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span>
    <span class="nv">$longVar1</span><span class="p">,</span>
    <span class="nv">$longerVar2</span><span class="p">,</span>
    <span class="nv">$muchLongerVar3</span>
<span class="p">)</span> <span class="p">{</span>
   <span class="c1">// body</span>
<span class="p">};</span>
</code></pre></div>
<p>Note that the formatting rules also apply when the closure is used directly
in a function or method call as an argument.</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span>
    <span class="nv">$arg1</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">(</span><span class="nv">$arg2</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$var1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// body</span>
    <span class="p">},</span>
    <span class="nv">$arg3</span>
<span class="p">);</span>
</code></pre></div>
<h2>7. Conclusion</h2>

<p>There are many elements of style and practice intentionally omitted by this
guide. These include but are not limited to:</p>
<p>本指南中很多元素的风格和实践被故意省略了。这些包括但并不限于以下内容：</p>

<ul>
<li><p>Declaration of global variables and global constants</p></li>
<li><p>全局变量和全局常量的声明</p></li>
<li><p>Declaration of functions</p></li>
<li><p>函数的声明</p></li>
<li><p>Operators and assignment</p></li>
<li><p>运算符和赋值</p></li>
<li><p>Inter-line alignment</p></li>
<li><p>Inter-line alignment</p></li>
<li><p>Comments and documentation blocks</p></li>
<li><p>评论和文档块</p></li>
<li><p>Class name prefixes and suffixes</p></li>
<li><p>类名前缀和后缀</p></li>
<li><p>Best practices</p></li>
<li><p>最佳实践</p></li>
</ul>

<p>Future recommendations MAY revise and extend this guide to address those or
other elements of style and practice.</p>
<p>Future recommendations MAY revise and extend this guide to address those or
other elements of style and practice.</p>

<h2>Appendix A. Survey</h2>
<h2>附录 A. 调查</h2>

<p>In writing this style guide, the group took a survey of member projects to
determine common practices.  The survey is retained herein for posterity.</p>

<h3>A.1. Survey Data</h3>
<div class="highlight"><pre><code class="text language-text" data-lang="text">url,http://www.horde.org/apps/horde/docs/CODING_STANDARDS,http://pear.php.net/manual/en/standards.php,http://solarphp.com/manual/appendix-standards.style,http://framework.zend.com/manual/en/coding-standard.html,http://symfony.com/doc/2.0/contributing/code/standards.html,http://www.ppi.io/docs/coding-standards.html,https://github.com/ezsystems/ezp-next/wiki/codingstandards,http://book.cakephp.org/2.0/en/contributing/cakephp-coding-conventions.html,https://github.com/UnionOfRAD/lithium/wiki/Spec%3A-Coding,http://drupal.org/coding-standards,http://code.google.com/p/sabredav/,http://area51.phpbb.com/docs/31x/coding-guidelines.html,https://docs.google.com/a/zikula.org/document/edit?authkey=CPCU0Us&amp;hgd=1&amp;id=1fcqb93Sn-hR9c0mkN6m_tyWnmEvoswKBtSc0tKkZmJA,http://www.chisimba.com,n/a,https://github.com/Respect/project-info/blob/master/coding-standards-sample.php,n/a,Object Calisthenics for PHP,http://doc.nette.org/en/coding-standard,http://flow3.typo3.org,https://github.com/propelorm/Propel2/wiki/Coding-Standards,http://developer.joomla.org/coding-standards.html
voting,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,no,no,no,?,yes,no,yes
indent_type,4,4,4,4,4,tab,4,tab,tab,2,4,tab,4,4,4,4,4,4,tab,tab,4,tab
line_length_limit_soft,75,75,75,75,no,85,120,120,80,80,80,no,100,80,80,?,?,120,80,120,no,150
line_length_limit_hard,85,85,85,85,no,no,no,no,100,?,no,no,no,100,100,?,120,120,no,no,no,no
class_names,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,lower_under,studly,lower,studly,studly,studly,studly,?,studly,studly,studly
class_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,next,next,next,next,next,next,same,next,next
constant_names,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper
true_false_null,lower,lower,lower,lower,lower,lower,lower,lower,lower,upper,lower,lower,lower,upper,lower,lower,lower,lower,lower,upper,lower,lower
method_names,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,lower_under,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel
method_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,same,next,next,next,next,next,same,next,next
control_brace_line,same,same,same,same,same,same,next,same,same,same,same,next,same,same,next,same,same,same,same,same,same,next
control_space_after,yes,yes,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes
always_use_control_braces,yes,yes,yes,yes,yes,yes,no,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes
else_elseif_line,same,same,same,same,same,same,next,same,same,next,same,next,same,next,next,same,same,same,same,same,same,next
case_break_indent_from_switch,0/1,0/1,0/1,1/2,1/2,1/2,1/2,1/1,1/1,1/2,1/2,1/1,1/2,1/2,1/2,1/2,1/2,1/2,0/1,1/1,1/2,1/2
function_space_after,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no
closing_php_tag_required,no,no,no,no,no,no,no,no,yes,no,no,no,no,yes,no,no,no,no,no,yes,no,no
line_endings,LF,LF,LF,LF,LF,LF,LF,LF,?,LF,?,LF,LF,LF,LF,?,,LF,?,LF,LF,LF
static_or_visibility_first,static,?,static,either,either,either,visibility,visibility,visibility,either,static,either,?,visibility,?,?,either,either,visibility,visibility,static,?
control_space_parens,no,no,no,no,no,no,yes,no,no,no,no,no,no,yes,?,no,no,no,no,no,no,no
blank_line_after_php,no,no,no,no,yes,no,no,no,no,yes,yes,no,no,yes,?,yes,yes,no,yes,no,yes,no
class_method_control_brace,next/next/same,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/next,same/same/same,same/same/same,same/same/same,same/same/same,next/next/next,next/next/same,next/same/same,next/next/next,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/same,next/next/next
</code></pre></div>
<h3>A.2. Survey Legend</h3>

<p><code>indent_type</code>:
The type of indenting. <code>tab</code> = &quot;Use a tab&quot;, <code>2</code> or <code>4</code> = &quot;number of spaces&quot;</p>

<p><code>line_length_limit_soft</code>:
The &quot;soft&quot; line length limit, in characters. <code>?</code> = not discernible or no response, <code>no</code> means no limit.</p>

<p><code>line_length_limit_hard</code>:
The &quot;hard&quot; line length limit, in characters. <code>?</code> = not discernible or no response, <code>no</code> means no limit.</p>

<p><code>class_names</code>:
How classes are named. <code>lower</code> = lowercase only, <code>lower_under</code> = lowercase with underscore separators, <code>studly</code> = StudlyCase.</p>

<p><code>class_brace_line</code>:
Does the opening brace for a class go on the <code>same</code> line as the class keyword, or on the <code>next</code> line after it?</p>

<p><code>constant_names</code>:
How are class constants named? <code>upper</code> = Uppercase with underscore separators.</p>

<p><code>true_false_null</code>:
Are the <code>true</code>, <code>false</code>, and <code>null</code> keywords spelled as all <code>lower</code> case, or all <code>upper</code> case?</p>

<p><code>method_names</code>:
How are methods named? <code>camel</code> = <code>camelCase</code>, <code>lower_under</code> = lowercase with underscore separators.</p>

<p><code>method_brace_line</code>:
Does the opening brace for a method go on the <code>same</code> line as the method name, or on the <code>next</code> line?</p>

<p><code>control_brace_line</code>:
Does the opening brace for a control structure go on the <code>same</code> line, or on the <code>next</code> line?</p>

<p><code>control_space_after</code>:
Is there a space after the control structure keyword?</p>

<p><code>always_use_control_braces</code>:
Do control structures always use braces?</p>

<p><code>else_elseif_line</code>:
When using <code>else</code> or <code>elseif</code>, does it go on the <code>same</code> line as the previous closing brace, or does it go on the <code>next</code> line?</p>

<p><code>case_break_indent_from_switch</code>:
How many times are <code>case</code> and <code>break</code> indented from an opening <code>switch</code> statement?</p>

<p><code>function_space_after</code>:
Do function calls have a space after the function name and before the opening parenthesis?</p>

<p><code>closing_php_tag_required</code>:
In files containing only PHP, is the closing <code>?&gt;</code> tag required?</p>

<p><code>line_endings</code>:
What type of line ending is used?</p>

<p><code>static_or_visibility_first</code>:
When declaring a method, does <code>static</code> come first, or does the visibility come first?</p>

<p><code>control_space_parens</code>:
In a control structure expression, is there a space after the opening parenthesis and a space before the closing parenthesis? <code>yes</code> = <code>if ( $expr )</code>, <code>no</code> = <code>if ($expr)</code>.</p>

<p><code>blank_line_after_php</code>:
Is there a blank line after the opening PHP tag?</p>

<p><code>class_method_control_brace</code>:
A summary of what line the opening braces go on for classes, methods, and control structures.</p>

<h3>A.3. Survey Results</h3>
<h3>A.3. 调查结果</h3>
<div class="highlight"><pre><code class="text language-text" data-lang="text">indent_type:
    tab: 7
    2: 1
    4: 14
line_length_limit_soft:
    ?: 2
    no: 3
    75: 4
    80: 6
    85: 1
    100: 1
    120: 4
    150: 1
line_length_limit_hard:
    ?: 2
    no: 11
    85: 4
    100: 3
    120: 2
class_names:
    ?: 1
    lower: 1
    lower_under: 1
    studly: 19
class_brace_line:
    next: 16
    same: 6
constant_names:
    upper: 22
true_false_null:
    lower: 19
    upper: 3
method_names:
    camel: 21
    lower_under: 1
method_brace_line:
    next: 15
    same: 7
control_brace_line:
    next: 4
    same: 18
control_space_after:
    no: 2
    yes: 20
always_use_control_braces:
    no: 3
    yes: 19
else_elseif_line:
    next: 6
    same: 16
case_break_indent_from_switch:
    0/1: 4
    1/1: 4
    1/2: 14
function_space_after:
    no: 22
closing_php_tag_required:
    no: 19
    yes: 3
line_endings:
    ?: 5
    LF: 17
static_or_visibility_first:
    ?: 5
    either: 7
    static: 4
    visibility: 6
control_space_parens:
    ?: 1
    no: 19
    yes: 2
blank_line_after_php:
    ?: 1
    no: 13
    yes: 8
class_method_control_brace:
    next/next/next: 4
    next/next/same: 11
    next/same/same: 1
    same/same/same: 6
</code></pre></div>

                </section>

{% include("VoyPhpFigBundle:Psr:aside.html.twig") %}
            </div>
        </div>
        <script type="text/javascript">
            var _gaq = _gaq || [];_gaq.push(['_setAccount','UA-1997599-8']);_gaq.push(['_setDomainName','php-fig.org']);_gaq.push(['_trackPageview']);
            (function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src='https://ssl.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();
        </script>


{% endblock %}

{% block javascripts %}
{{ parent() }}
    <script type="text/javascript" src="{{ asset('js/jquery.min.js') }}"></script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('/bundles/voyphpfig/css/stylesheet.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('/bundles/voyphpfig/css/pygment_trac.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('/bundles/voyphpfig/css/print.css') }}"  media="print">
{% endblock %}

